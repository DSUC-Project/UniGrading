// debug.ts - File ƒë·ªÉ test nhanh t·ª´ng ch·ª©c nƒÉng
import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { UniGrading } from "../target/types/uni_grading";

async function main() {
  console.log("üîß B·∫ÆT ƒê·∫¶U DEBUG - H·ªá th·ªëng qu·∫£n l√Ω ƒëi·ªÉm");
  console.log("=".repeat(50));

  // Kh·ªüi t·∫°o
  console.log("1Ô∏è‚É£ KH·ªûI T·∫†O ANCHOR V√Ä PROGRAM");
  console.log("   - ƒêang k·∫øt n·ªëi v·ªõi cluster...");
  anchor.setProvider(anchor.AnchorProvider.env());
  console.log("   ‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi provider");
  
  const program = anchor.workspace.uniGrading as Program<UniGrading>;
  console.log("   ‚úÖ ƒê√£ load program UniGrading");
  console.log("   - Program ID:", program.programId.toString());
  
  const provider = anchor.getProvider();
  console.log("   ‚úÖ ƒê√£ l·∫•y provider");
  console.log("   - Provider wallet:", provider.publicKey?.toString());
  console.log("");

  // B∆∞·ªõc 1: T·∫°o accounts
  console.log("2Ô∏è‚É£ T·∫†O C√ÅC T√ÄI KHO·∫¢N TEST");
  console.log("   - ƒêang t·∫°o keypairs...");
  const teacher = anchor.web3.Keypair.generate();
  console.log("   ‚úÖ Teacher keypair:", teacher.publicKey.toString());
  
  const userAccount = anchor.web3.Keypair.generate();
  console.log("   ‚úÖ User account keypair:", userAccount.publicKey.toString());
  
  const classroom = anchor.web3.Keypair.generate();
  console.log("   ‚úÖ Classroom keypair:", classroom.publicKey.toString());
  
  const studentAccount = anchor.web3.Keypair.generate();
  console.log("   ‚úÖ Student account keypair:", studentAccount.publicKey.toString());
  console.log("");

  // B∆∞·ªõc 2: Transfer SOL t·ª´ authority sang teacher
  console.log("3Ô∏è‚É£ TRANSFER SOL CHO TEACHER");

  let teacherBalance = await provider.connection.getBalance(teacher.publicKey);
  console.log("   - Teacher balance hi·ªán t·∫°i:", teacherBalance / anchor.web3.LAMPORTS_PER_SOL, "SOL");

  if (teacherBalance < 1 * anchor.web3.LAMPORTS_PER_SOL) {
    console.log("   - Balance th·∫•p, ƒëang transfer 0.1 SOL t·ª´ authority...");

    const transferTx = new anchor.web3.Transaction().add(
      anchor.web3.SystemProgram.transfer({
        fromPubkey: (provider.wallet as anchor.Wallet).publicKey,
        toPubkey: teacher.publicKey,
        lamports: 0.1 * anchor.web3.LAMPORTS_PER_SOL,
      })
    );

    const signature = await provider.sendAndConfirm!(transferTx);
    console.log("   ‚úÖ Transfer th√†nh c√¥ng!");
    console.log("   - TX signature:", signature);

    teacherBalance = await provider.connection.getBalance(teacher.publicKey);
    console.log("   - Teacher balance sau transfer:", teacherBalance / anchor.web3.LAMPORTS_PER_SOL, "SOL");
  } else {
    console.log("   ‚úÖ Teacher balance ƒë·ªß ƒë·ªÉ test, kh√¥ng c·∫ßn transfer");
  }
  console.log("");

  try {
    // B∆∞·ªõc 3: ƒêƒÉng k√Ω gi√°o vi√™n
    console.log("4Ô∏è‚É£ ƒêƒÇNG K√ù GI√ÅO VI√äN");
    console.log("   - Chu·∫©n b·ªã g·ªçi instruction register_user...");
    console.log("   - Tham s·ªë: username = 'Th·∫ßy Nguy√™n', role = 'Teacher'");
    console.log("   - Accounts:");
    console.log("     * user:", userAccount.publicKey.toString());
    console.log("     * authority:", teacher.publicKey.toString());
    console.log("     * systemProgram:", anchor.web3.SystemProgram.programId.toString());
    console.log("     * clock:", anchor.web3.SYSVAR_CLOCK_PUBKEY.toString());
    console.log("   - Signers: teacher, userAccount");
    console.log("   - ƒêang g·ªçi instruction...");
    
    const registerTx = await program.methods
      .registerUser("Th·∫ßy Nguy√™n", { teacher: {} })
      .accounts({
        user: userAccount.publicKey,
        authority: teacher.publicKey,
        systemProgram: anchor.web3.SystemProgram.programId,
        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,
      })
      .signers([teacher, userAccount])
      .rpc();
    
    console.log("   ‚úÖ Transaction th√†nh c√¥ng!");
    console.log("   - TX signature:", registerTx);
    console.log("   - ƒêang fetch d·ªØ li·ªáu user...");
    
    const userData = await program.account.user.fetch(userAccount.publicKey);
    console.log("   ‚úÖ D·ªØ li·ªáu user:");
    console.log("     * username:", userData.username);
    console.log("     * authority:", userData.authority.toString());
    console.log("     * role:", userData.role);
    console.log("     * isActive:", userData.isActive);
    console.log("     * createdAt:", new Date(userData.createdAt * 1000).toLocaleString());
    console.log("");

    // B∆∞·ªõc 4: T·∫°o l·ªõp h·ªçc
    console.log("5Ô∏è‚É£ T·∫†O L·ªöP H·ªåC");
    console.log("   - Chu·∫©n b·ªã g·ªçi instruction initialize_classroom...");
    console.log("   - Tham s·ªë: name = 'To√°n 101', course = 'To√°n h·ªçc'");
    console.log("   - Accounts:");
    console.log("     * classroom:", classroom.publicKey.toString());
    console.log("     * authority:", teacher.publicKey.toString());
    console.log("     * teacherUser:", userAccount.publicKey.toString());
    console.log("     * systemProgram:", anchor.web3.SystemProgram.programId.toString());
    console.log("   - Signers: teacher, classroom");
    console.log("   - ƒêang g·ªçi instruction...");
    
    const classroomTx = await program.methods
      .initializeClassroom("To√°n 101", "To√°n h·ªçc")
      .accounts({
        classroom: classroom.publicKey,
        authority: teacher.publicKey,
        teacherUser: userAccount.publicKey,
        systemProgram: anchor.web3.SystemProgram.programId,
      })
      .signers([teacher, classroom])
      .rpc();
    
    console.log("   ‚úÖ Transaction th√†nh c√¥ng!");
    console.log("   - TX signature:", classroomTx);
    console.log("   - ƒêang fetch d·ªØ li·ªáu classroom...");
    
    const classroomData = await program.account.classroom.fetch(classroom.publicKey);
    console.log("   ‚úÖ D·ªØ li·ªáu classroom:");
    console.log("     * name:", classroomData.name);
    console.log("     * course:", classroomData.course);
    console.log("     * teacher:", classroomData.teacher.toString());
    console.log("     * students count:", classroomData.students.length);
    console.log("");

    // B∆∞·ªõc 5: Th√™m h·ªçc sinh
    console.log("6Ô∏è‚É£ TH√äM H·ªåC SINH");
    console.log("   - Chu·∫©n b·ªã g·ªçi instruction add_student...");
    console.log("   - Tham s·ªë: name = 'Nguy·ªÖn VƒÉn A', id = 'SV001'");
    console.log("   - Accounts:");
    console.log("     * classroom:", classroom.publicKey.toString());
    console.log("     * student:", studentAccount.publicKey.toString());
    console.log("     * authority:", teacher.publicKey.toString());
    console.log("     * systemProgram:", anchor.web3.SystemProgram.programId.toString());
    console.log("   - Signers: teacher, studentAccount");
    console.log("   - ƒêang g·ªçi instruction...");
    
    const studentTx = await program.methods
      .addStudent("Nguy·ªÖn VƒÉn A", "SV001")
      .accounts({
        classroom: classroom.publicKey,
        student: studentAccount.publicKey,
        authority: teacher.publicKey,
        systemProgram: anchor.web3.SystemProgram.programId,
      })
      .signers([teacher, studentAccount])
      .rpc();
    
    console.log("   ‚úÖ Transaction th√†nh c√¥ng!");
    console.log("   - TX signature:", studentTx);
    console.log("   - ƒêang fetch d·ªØ li·ªáu student...");
    
    const studentData = await program.account.student.fetch(studentAccount.publicKey);
    console.log("   ‚úÖ D·ªØ li·ªáu student:");
    console.log("     * name:", studentData.name);
    console.log("     * id:", studentData.id);
    console.log("     * classroom:", studentData.classroom.toString());
    console.log("     * grades count:", studentData.grades.length);
    console.log("");
    
    // Ki·ªÉm tra classroom ƒë√£ ƒë∆∞·ª£c update ch∆∞a
    console.log("   - Ki·ªÉm tra classroom ƒë√£ ƒë∆∞·ª£c update...");
    const updatedClassroom = await program.account.classroom.fetch(classroom.publicKey);
    console.log("   ‚úÖ Classroom sau khi th√™m student:");
    console.log("     * students count:", updatedClassroom.students.length);
    if (updatedClassroom.students.length > 0) {
      console.log("     * student ƒë·∫ßu ti√™n:", updatedClassroom.students[0].name);
      console.log("     * student pubkey:", updatedClassroom.students[0].pubkey.toString());
    }
    console.log("");

    // B∆∞·ªõc 6: Ch·∫•m ƒëi·ªÉm
    console.log("7Ô∏è‚É£ CH·∫§M ƒêI·ªÇM");
    console.log("   - Chu·∫©n b·ªã g·ªçi instruction assign_grade...");
    console.log("   - Tham s·ªë: assignment = 'Ki·ªÉm tra gi·ªØa k·ª≥', grade = 85, maxGrade = 100");
    console.log("   - Accounts:");
    console.log("     * student:", studentAccount.publicKey.toString());
    console.log("     * teacher:", teacher.publicKey.toString());
    console.log("     * teacherUser:", userAccount.publicKey.toString());
    console.log("   - Signers: teacher");
    console.log("   - ƒêang g·ªçi instruction...");
    
    const gradeTx = await program.methods
      .assignGrade("Ki·ªÉm tra gi·ªØa k·ª≥", 85, 100)
      .accounts({
        student: studentAccount.publicKey,
        teacher: teacher.publicKey,
        teacherUser: userAccount.publicKey,
      })
      .signers([teacher])
      .rpc();
    
    console.log("   ‚úÖ Transaction th√†nh c√¥ng!");
    console.log("   - TX signature:", gradeTx);
    console.log("   - ƒêang fetch d·ªØ li·ªáu student sau khi ch·∫•m ƒëi·ªÉm...");
    
    const gradedStudent = await program.account.student.fetch(studentAccount.publicKey);
    console.log("   ‚úÖ D·ªØ li·ªáu student sau khi ch·∫•m ƒëi·ªÉm:");
    console.log("     * name:", gradedStudent.name);
    console.log("     * grades count:", gradedStudent.grades.length);
    
    if (gradedStudent.grades.length > 0) {
      const grade = gradedStudent.grades[0];
      console.log("     * Grade ƒë·∫ßu ti√™n:");
      console.log("       - assignmentName:", grade.assignmentName);
      console.log("       - grade:", grade.grade);
      console.log("       - maxGrade:", grade.maxGrade);
      console.log("       - timestamp:", new Date(grade.timestamp * 1000).toLocaleString());
      console.log("       - gradedBy:", grade.gradedBy.toString());
    }
    console.log("");

    // B∆∞·ªõc 7: Ki·ªÉm tra t·ªïng k·∫øt
    console.log("8Ô∏è‚É£ KI·ªÇM TRA T·ªîNG K·∫æT");
    console.log("   - ƒêang fetch t·∫•t c·∫£ d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra...");
    
    const finalUserData = await program.account.user.fetch(userAccount.publicKey);
    const finalClassroomData = await program.account.classroom.fetch(classroom.publicKey);
    const finalStudentData = await program.account.student.fetch(studentAccount.publicKey);

    console.log("   ‚úÖ T·ªîNG K·∫æT TO√ÄN B·ªò H·ªÜ TH·ªêNG:");
    console.log("   " + "=".repeat(40));
    console.log("   üìã TH√îNG TIN GI√ÅO VI√äN:");
    console.log("      - T√™n:", finalUserData.username);
    console.log("      - Vai tr√≤:", finalUserData.role);
    console.log("      - Tr·∫°ng th√°i:", finalUserData.isActive ? "Ho·∫°t ƒë·ªông" : "Ng·ª´ng ho·∫°t ƒë·ªông");
    console.log("      - Ng√†y t·∫°o:", new Date(finalUserData.createdAt * 1000).toLocaleString());
    console.log("");
    
    console.log("   üè´ TH√îNG TIN L·ªöP H·ªåC:");
    console.log("      - T√™n l·ªõp:", finalClassroomData.name);
    console.log("      - M√¥n h·ªçc:", finalClassroomData.course);
    console.log("      - Gi√°o vi√™n ph·ª• tr√°ch:", finalClassroomData.teacher.toString());
    console.log("      - S·ªë h·ªçc sinh:", finalClassroomData.students.length);
    console.log("      - Danh s√°ch h·ªçc sinh:");
    finalClassroomData.students.forEach((student, index) => {
      console.log(`         ${index + 1}. ${student.name} (${student.pubkey.toString()})`);
    });
    console.log("");
    
    console.log("   üë®‚Äçüéì TH√îNG TIN H·ªåC SINH:");
    console.log("      - T√™n:", finalStudentData.name);
    console.log("      - M√£ s·ªë SV:", finalStudentData.id);
    console.log("      - L·ªõp h·ªçc:", finalStudentData.classroom.toString());
    console.log("      - S·ªë ƒëi·ªÉm ƒë√£ c√≥:", finalStudentData.grades.length);
    console.log("      - Chi ti·∫øt ƒëi·ªÉm:");
    finalStudentData.grades.forEach((grade, index) => {
      console.log(`         ${index + 1}. ${grade.assignmentName}: ${grade.grade}/${grade.maxGrade}`);
      console.log(`            - Ng√†y ch·∫•m: ${new Date(grade.timestamp * 1000).toLocaleString()}`);
      console.log(`            - Ng∆∞·ªùi ch·∫•m: ${grade.gradedBy.toString()}`);
    });
    console.log("");

    // T√≠nh to√°n th√™m
    console.log("   üìä TH·ªêNG K√ä:");
    if (finalStudentData.grades.length > 0) {
      const totalPoints = finalStudentData.grades.reduce((sum, grade) => sum + grade.grade, 0);
      const totalMaxPoints = finalStudentData.grades.reduce((sum, grade) => sum + grade.maxGrade, 0);
      const average = (totalPoints / totalMaxPoints * 100).toFixed(2);
      console.log("      - T·ªïng ƒëi·ªÉm:", totalPoints + "/" + totalMaxPoints);
      console.log("      - ƒêi·ªÉm trung b√¨nh:", average + "%");
      console.log("      - X·∫øp lo·∫°i:", average >= 80 ? "Gi·ªèi" : average >= 65 ? "Kh√°" : average >= 50 ? "Trung b√¨nh" : "Y·∫øu");
    }
    console.log("");

    console.log("üéâ HO√ÄN TH√ÄNH T·∫§T C·∫¢ C√ÅC B∆Ø·ªöC!");
    console.log("   - T·∫•t c·∫£ ch·ª©c nƒÉng ƒë·ªÅu ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng");
    console.log("   - D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u tr·ªØ ƒë√∫ng tr√™n blockchain");
    console.log("   - H·ªá th·ªëng s·∫µn s√†ng s·ª≠ d·ª•ng");
    console.log("=".repeat(50));

  } catch (error) {
    console.error("‚ùå L·ªñI X·∫¢Y RA!");
    console.error("=".repeat(50));
    
    // In ra th√¥ng tin chi ti·∫øt ƒë·ªÉ debug
    console.error("üîç TH√îNG TIN CHI TI·∫æT L·ªñI:");
    console.error("   - Lo·∫°i l·ªói:", error.constructor.name);
    console.error("   - Message:", error.message);
    
    if (error.stack) {
      console.error("   - Stack trace:");
      console.error(error.stack);
    }
    
    if (error.logs) {
      console.error("   - Program logs:");
      error.logs.forEach((log, index) => {
        console.error(`     ${index + 1}. ${log}`);
      });
    }
    
    if (error.programErrorStack) {
      console.error("   - Program error stack:");
      console.error(error.programErrorStack);
    }
    
    console.error("=".repeat(50));
    console.error("üí° G·ª¢I √ù DEBUG:");
    console.error("   1. Ki·ªÉm tra balance SOL c·ªßa c√°c account");
    console.error("   2. X√°c nh·∫≠n program ƒë√£ ƒë∆∞·ª£c deploy");
    console.error("   3. Ki·ªÉm tra network connection");
    console.error("   4. Xem l·∫°i logic trong smart contract");
    console.error("=".repeat(50));
  }
}

// Ch·∫°y debug
main().catch(console.error);

// ƒê·ªÉ ch·∫°y file n√†y:
// 1. L∆∞u th√†nh file debug.ts
// 2. Ch·∫°y: npx ts-node debug.ts
// 3. Ho·∫∑c th√™m v√†o package.json: "debug": "ts-node debug.ts"